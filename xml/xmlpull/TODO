xgo/xml/xmlpull/TODO

2014-08-07 (edited from 06-01)
    * FIX: minimalDoclTest.TestParseBoth... is incomplete

    * parseMisc_test.go: set initial state, devise way to specify
        state if no Misc found

2014-08-06
    * lexer.go handling of EOF is confused; get rid of lxErr            * DONE
    * apparently acceptMisc() at least sometimes duplicates last        * WRONG
        character in p.text: misc.body 20 0a yields p.text 20 0a 0a     * OK...
        - MISDIAGNOSIS: got misc body 20 0a 20 but p.text 20 01 20 09   * OK...
        - useful: go test | tee junk                                    * RIGHT
        - PROBLEM IS IN THE TEST: it sometimes creates two S items      * FIXED
            in a row, which of course get merged !                      * FIXED
    * FIX: comment generator in parseMisc_test.go generates random      * FIXED
        comments with bodies ending in '-', causing occasional          * FIXED
        three-dashes-in-a-row erros                                     * FIXED
2014-05-31
    * minimalDoc_test needs to be elaborated to include
        - randomized Misc1 after XMLDecl?
            * newlines should be IGNORABLE_WHITESPACE
            * Misc should be nothing or zero or more S or Comment 
                or PI
        - doctypedecl optionally present or absent
        - randomized Misc2 after doctypedecl if present
        - randomized MiscN after empty element
    * so terminating newlines must be removed from XML_DECL and         * DONE
        DOCTYPE_DECL in minimalDoc_test.go (but possibly added          * DONE
        back in as Misc*)                                               * DONE
        - fix the test failure that this causes!

2014-05-28
    * non-tokenizing rudimentary parser returns four event types:
        {START,END}_DOCUMENT, {START,END}_TAG
    * tokenizing rudimentary parser returns at least _ event types:
        {START,END}_DOCUMENT, {START,END}_TAG plus
        PROCESSING_INSTRUCTION, COMMENT, DOCDECL
    * need thorough tests of proper handling of xmlDecl, Misc*, 
        doctypedecl, attribute-less empty element; these can live
        in minimalDoc_test.go
    * need to factor out detection and handling of Misc*
        
2014-05-27
    * delete local pull branch
    * test handling of BOM

2014-05-25
    * REVIEW decision to always set p.curEvent when returning
        curEvent

2014-05-24 (03-23, edited)
    * get rudimentary parser working (ISSUE#5)
        document ::= prolog element Misc*
        element  ::= EmptyElemTag                                       * DONE
        prolog   ::= XMLDecl? Misc* (doctypedecl Misc*)? 
        Misc     ::= Comment | S
    * Misc* implemented as Parser.acceptMisc

2014-05-24 (04-18, edited)
    * parseProlog must be restructured to better match the xml 1.0 
        syntax graph
    * the test for \uFFFE should be moved to whatever calls parseProlog
    * the call to parseProlog should NOT be in next.go's Next() 
    * implement parseProlog_test.go 

    * create a tool which calls the pull parser to produce a tree of
        xml OM object as in ../om/.
    * then write a serializer which converts the OM tree to a cannical
        serial form
        - which is guaranteed to round-trip back to the same form

2014-04-24
    * Parser struct must contain root Element with semantic properties 
        required by XML spec
        - this is the bottom of the element stack
    * parseDocTypeDecl.go and test need more work (but ok for now)

    * for this to be a pull parser, the parser must know its position
        in the syntax graph, returning a PullEvent at appropriate 
        points (more events if tokenizing)

2014-04-22
    VERIFY PRODUCTIONS
    * 1     document --> 22 39 27*
    * 3     S (1 or more whitespace char))
        - FIX: Parser.ExpectS() does not correctly implement this rule
        - CHECK: all use of Parser.SkipS()
        - then rename to Parser.S, expecting 1 or more from 4 rune set
    * 5     Name
    * 10    AttrValue --> ... | 67 in quotes
    * 14    CharData
    * 15    comment                                                     * DONE
    * 16-17 PI                                                          * DONE
    * 18-19 CData section                                               * DONE
    * 22    prolog --> 23? 27* (28 27*)?
    * 23-26 XMLDecl (also includes 80-81, 32)                           * DONE 
    * 25    Eq                                                          * DONE
    * 27    Misc --> 15 | 16 | 3
    * 28    doctypedecl --> 3 5 ... NEEDS WORK, BUT OK FOR NOW          * DONE
    * 39    element --> 44 | 40 43 42
    * 40    STag  --> 5 (3 41)* 3?
    * 41    Attribute --> 5 25 10 // 25 is Eq
    * 42    ETag --> 5 3?
    * 43    content -> 14? ((39 | 18 | 16 | 15) 14?
    * 44    EmptyElemTag -> 5 (3 41)* 3?
    * 67    Reference

    * 80-81 EncodingDecl // uses 25, Eq

2014-04-13
    * move 'implementation of XmlPullParser' from parser.go             * DONE
        into implementation.go                                          * DONE
    * then move code from properties.go into that file

2014-03-22
    * move stuff from properties.ZZZ to properties.go
2014-03-21
    * need test of getName() -- should be in properties_test.go
    * need test of getNamespace() -- properties_test.go
2014-03-18
    * desperately need parseEntityRef_test.go

2014-03-08
    * test printable*()
    * test charTests.go

2013-12-07
    * verify lexer.go has all functions in xgo/lex/lex_input.go
        - and rearrange the latter into alphabetical order
    * parseXmlDecl must collect its runes, add to Parser struct

2013-11-21 (11-20, edited)
    * build skeletal parser as parser.go                                * DONE
        - be able to read and parse first line
            * parseXmlDecl()

    * write parser_test.go, initially testing that reset() works 
        as expected

2013-11-08
    * For string interning see eg stackoverflow 13017499                * DONE
        is-there-an-equivalent-to-javas-string-intern-function-in-go    * DONE
